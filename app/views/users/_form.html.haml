= form_for @user do |f|
  - if @user.errors.any?
    #error_explanation
      %h2= "#{pluralize(@user.errors.count, "error")} prohibited this user from being saved:"
      %ul
        - @user.errors.full_messages.each do |msg|
          %li= msg
  .field
    = f.label :first_name, {:class => 'required'}
    = f.text_field :first_name
  .field
    = f.label :middle_name
    = f.text_field :middle_name
  .field
    = f.label :last_name, {:class => 'required'}
    = f.text_field :last_name
  .field
    = f.label :phone, {:class => 'required'}
    = f.text_field :phone
    Number Format is xxx-xxxx-xxxx
  .field
    = f.label :cell, {:class => 'required'}
    = f.text_field :cell
    Number Format is xxxx-xxxx-xxx
  .field
    = f.label :email, {:class => 'required'}
    = f.text_field :email
  .field
    = f.label :password, {:class => 'required'}
    = f.password_field :password
  .field
    = f.label :passwordhint
    = f.text_field :passwordhint
    -if params[:param]=="1"    
      = f.hidden_field :role, :value => "supervisor"
    -elsif params[:param]=="2"   
      = f.hidden_field :role, :value => "user"
    -else    
      = f.hidden_field :role, :value => "support"    
  .actions
    -if params[:param]=="1"    
      = f.submit 'Save', {:class => "button1"}
    -elsif params[:param]=="2"   
      = f.submit 'Save', {:class => "button1"}   
    -else         
      = f.submit 'Save', {:class => "button1"}
    

:javascript
  var validator = new FormValidator('new_user', [{
    name: 'user[first_name]', 
    display:'First Name',    
    rules: 'required'
  }, {
    name: 'user[last_name]',
    display:'Last Name',
    rules: 'required'
  }, {
    name: 'user[phone]',
    display:'Phone',
    rules: 'callback_check_phone|required'
  }, {
    name: 'user[cell]',
    display:'Cell',
    rules: 'callback_check_mobile|required'
  }, {
    name: 'user[email]',
    display:'Email',
    rules: 'callback_check_email|required'
  }, {
    name: 'user[password]',
    display:'Password',
    rules: 'required'
  }], function(errors, event) {
    if (errors.length > 0) {
    var temp;
    $(":text").each(function(){
        $(this).css("border","#cccccc 1px solid");      
      });
    for (var i=0; i<errors.length; i++){
      temp = errors[i].id;
      $("#" + temp).css("border","1px solid red");
    }
    temp = errors[0].id;
    $( "#" + temp).focus();
    }  
  });
  validator.registerCallback('check_email', function(value) {
    var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/;
    if( !emailReg.test( value ) ) {
      return false;
    } else {
      return true;
    }
  })
  .setMessage('check_email', 'Please enter a valid email address.');

  validator.registerCallback('check_phone', function(value) {
      var phoneno = /^(\()?\d{3}(\))?(-|\s)?\d{4}(-|\s)\d{4}$/;  
      if( !value.match(phoneno) ) {
        return false;
      } else {
        return true;
      }
    })
    .setMessage('check_phone', 'Please enter number according to format');

    validator.registerCallback('check_mobile', function(value) {
      var mobileno = /^(\()?\d{4}(\))?(-|\s)?\d{4}(-|\s)\d{3}$/;  
      if( !value.match(mobileno) ) {
        return false;
      } else {
        return true;
      }
    })
    .setMessage('check_mobile', 'Please enter number according to format');