-if current_user.role== "admin"
  .row-fluid.sortable
    .box.span12
      .box-header.well{"data-original-title" => ""}
        %h2
          %i.icon-user.icon-white
          System Configurations
      .box-content   
        = render ("layouts/breadcrumbs") 
        = form_for @system_config, :url => change_create_users_path, :html => { :multipart => true } do |f|
          .field
            = f.label :company_logo
            = f.file_field :logo
          .clear
          .field
            = f.label :system_name
            = f.text_field :systemname
          .field
            = f.label :company_name
            = f.text_field :companyname
          .field
            = f.label :copyright_text
            = f.text_area :copytext
          .actions  
            = f.submit "Save Configurations", {:class => "button1"}   
.row-fluid.sortable
  .box.span12
    .box-header.well{"data-original-title" => ""}
      %h2
        %i.icon-user.icon-white
        Customer Configurations
    .box-content    
      = form_for @user_config, :url => config_create_users_path, :html => { :multipart => true } do |f|
        
        .field
          = f.label :Customer, {:class => "required"}
          -if current_user.role == "admin"
            = f.collection_select(:customer_id, Customer.where(:delflag=>false), :id, :company_name, { :include_blank => true })
          -else
            = f.collection_select(:customer_id, Customer.where(:delflag=>false, :user_id => "#{current_user.id}"), :id, :company_name, { :include_blank => true })        
        .field
          = f.label :floor_capacity
          = f.text_field :floorcapacity
        .field
          = f.label :vehicle_capacity
          = f.text_field :vehiclecapacity
        .field
          = f.label :user_capacity
          = f.text_field :usercapacity
        .actions  
          = f.submit "Save Configurations", {:class => "button1"}

:javascript
  var validator = new FormValidator('new_user_config', [{
    name: 'user_config[customer_id]', 
    display:'Customer',   
    rules: 'required'
  }], function(errors, event) {
    if (errors.length > 0) {
    var temp;
    $(":text").each(function(){
        $(this).css("border","#cccccc 1px solid");      
      });
    for (var i=0; i<errors.length; i++){
      temp = errors[i].id;
      $("#" + temp).css("border","1px solid red");
    }
    temp = errors[0].id;
    $( "#" + temp).focus();
    }  
  });

  jQuery(function($) {
  $("#user_config_customer_id").change(function() {
    var state = $('select#user_config_customer_id :selected').val();
    if(state == "") state="0";
    jQuery.getJSON('/users/configuration/' + state, function(data){
      if(data){
        $("#user_config_floorcapacity").val(data["floorcapacity"]);
        $("#user_config_vehiclecapacity").val(data["vehiclecapacity"]);
        $("#user_config_usercapacity").val(data["usercapacity"]);
      }
      else{
        $("#user_config_floorcapacity").val("");
        $("#user_config_vehiclecapacity").val("");
        $("#user_config_usercapacity").val("");
      }   
    })
    return false;
  });
  })


