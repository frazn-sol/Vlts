= form_for @floor do |f|
  - if @floor.errors.any?
    #error_explanation
      %h2= "#{pluralize(@floor.errors.count, "error")} prohibited this floor from being saved:"
      %ul
        - @floor.errors.full_messages.each do |msg|
          %li= msg

  .field
    = f.label :nickname, {:class => 'required'}
    = f.text_field :nickname
  .field
    = f.label :location, {:class =>"required"}
    -if "#{params[:location_id]}".present?
      = f.text_field :location_id, :value => Location.where(:id => "#{params[:location_id]}")[0].nickname, :readonly => true
    -else  
      -if current_user.role == "customer"
        = f.collection_select(:location_id, Location.where(:user_id => "#{current_user.id}", :delflag => "false"), :id, :nickname, { :include_blank => true })
      -else
        = f.collection_select(:location_id, Location.where(:user_id => "#{current_user.id}", :delflag => "false") + Location.where(:user_id => "#{current_user.parent_id}", :delflag => false), :id, :nickname, { :include_blank => true })    
  .field
    = f.label :description
    = f.text_field :description
  .field
    = f.label :capacity, {:class => 'required'}
    = f.text_field :capacity
  .field
    = f.hidden_field :occupied, :value => 0
  .actions
    = f.submit 'Create Floors', {:class => "button1"}

:javascript
  var validator = new FormValidator('new_floor', [{
    name: 'floor[nickname]',    
    rules: 'required'
  }, {
    name: 'floor[location]',
    rules: 'required'
  }, {
    name: 'floor[location_id]',
    rules: 'required'
  }, {
    name: 'floor[capacity]',
    rules: 'required'
  }], function(errors, event) {
    if (errors.length > 0) {
    var temp;
    for (var i=0; i<errors.length; i++){
      temp = errors[i].id;
      $("#" + temp).css("border","2px solid red");
    }
    }  
  });   