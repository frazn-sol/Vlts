= form_for @location do |f|
  - if @location.errors.any?
    #error_explanation
      %h2= "#{pluralize(@location.errors.count, "error")} prohibited this location from being saved:"
      %ul
        - @location.errors.full_messages.each do |msg|
          %li= msg

  .field
    = f.label :nickname, {:class => 'required'}
    = f.text_field :nickname
  .field
    = f.label :description, {:class => 'required'}
    = f.text_area :description
  .field
    = f.label :address1, {:class => 'required'}
    = f.text_field :address1
  .field
    = f.label :address2
    = f.text_field :address2
  .field
    = f.label :city, {:class => 'required'}
    = f.text_field :city  
  .field
    = f.label :state, {:class => 'required'}
    = f.text_field :state
  .field
    = f.label :zipcode, {:class => 'required'}
    = f.text_field :zipcode
  .field
    = f.label :phone1, {:class => 'required'}
    = f.text_field :phone1
  .field
    = f.label :phone2
    = f.text_field :phone2
  .field
    = f.label :web
    = f.text_field :web
  .field
    = f.label :email, {:class => 'required'}
    = f.text_field :email
  .actions
    = f.submit 'Create Location', {:class => "button1"}


:javascript
  var validator = new FormValidator('new_location', [{
    name: 'location[company_name]',    
    rules: 'required'
  }, {
    name: 'location[address1]',
    rules: 'required'
  }, {
    name: 'location[state]',
    rules: 'required'
  }, {
    name: 'location[city]',
    rules: 'required'
  }, {
    name: 'location[zipcode]',
    rules: 'required|numeric'
  }, {
    name: 'location[phone1]',
    rules: 'required|numeric'
  }, {
    name: 'location[email]',
    rules: 'required|valid_email'
  }, {
    name: 'location[nickname]',
    rules: 'required'
  }, {
    name: 'location[description]',
    rules: 'required'
  }], function(errors, event) {
    if (errors.length > 0) {
    var temp;
    for (var i=0; i<errors.length; i++){
      temp = errors[i].id;
      $("#" + temp).css("border","1px solid red");
    }
    temp = errors[0].id;
    $( "#" + temp).focus();
    } 
  });  