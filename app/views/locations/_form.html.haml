= form_for @location do |f|
  - if @location.errors.any?
    #error_explanation
      %h2= "#{pluralize(@location.errors.count, "error")} prohibited this location from being saved:"
      %ul
        - @location.errors.full_messages.each do |msg|
          %li= msg

  .field
    = f.label :nickname, {:class => 'required'}
    = f.text_field :nickname
  .field
    = f.label :description, {:class => 'required'}
    = f.text_area :description
  .field
    = f.label :address1, {:class => 'required'}
    = f.text_field :address1
  .field
    = f.label :address2
    = f.text_field :address2
  .field
    = f.label :city, {:class => 'required'}
    = f.text_field :city  
  .field
    = f.label :state, {:class => 'required'}
    = f.text_field :state
  .field
    = f.label :zipcode, {:class => 'required'}
    = f.text_field :zipcode
  .field
    = f.label :phone1, {:class => 'required'}
    = f.text_field :phone1
  .field
    = f.label :phone2
    = f.text_field :phone2
  .field
    = f.label :web
    = f.text_field :web
  .field
    = f.label :email, {:class => 'required'}
    = f.text_field :email
  .actions
    = f.submit 'Save', {:class => "button1"}

-if params[:id].present?
  :javascript
    var validator = new FormValidator('edit_location_#{@location.id.to_s}', [{
      name: 'location[company_name]',  
      display:'Company Name',  
      rules: 'required'
    }, {
      name: 'location[address1]',
      display:'Addres1',  
      rules: 'required'
    }, {
      name: 'location[state]',
      display:'State',  
      rules: 'required'
    }, {
      name: 'location[city]',
      display:'City',
      rules: 'required'
    }, {
      name: 'location[zipcode]',
      display:'Zipcode',
      rules: 'required|numeric'
    }, {
      name: 'location[phone1]',
      display:'Phone1',
      rules: 'required|callback_check_phone'
    }, {
      name: 'location[email]',
      display:'Email',
      rules: 'required|callback_check_email'
    }, {
      name: 'location[nickname]',
      display:'Nickname',
      rules: 'required'
    }, {
      name: 'location[description]',
      display:'Description',
      rules: 'required'
    }], function(errors, event) {
      if (errors.length > 0) {
      var temp;
      $(":text").each(function(){
        $(this).css("border","#cccccc 1px solid");      
      });
      for (var i=0; i<errors.length; i++){
        temp = errors[i].id;
        $("#" + temp).css("border","1px solid red");
      }
      temp = errors[0].id;
      $( "#" + temp).focus();
      } 
    }); 
    validator.registerCallback('check_email', function(value) {
      var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/;
      if( !emailReg.test( value ) ) {
        return false;
      } else {
        return true;
      }
    })
    .setMessage('check_email', 'Please enter a valid email address.');   
    validator.registerCallback('check_phone', function(value) {
      var phoneno = /^(\()?\d{3}(\))?(-|\s)?\d{4}(-|\s)\d{4}$/;  
      if( !value.match(phoneno) ) {
        return false;
      } else {
        return true;
      }
    })
    .setMessage('check_phone', 'Please enter number according to format');     
-else
  :javascript
    var validator = new FormValidator('new_location', [{
      name: 'location[company_name]',  
      display:'Company Name',  
      rules: 'required'
    }, {
      name: 'location[address1]',
      display:'Addres1',  
      rules: 'required'
    }, {
      name: 'location[state]',
      display:'State',  
      rules: 'required'
    }, {
      name: 'location[city]',
      display:'City',
      rules: 'required'
    }, {
      name: 'location[zipcode]',
      display:'Zipcode',
      rules: 'required|numeric'
    }, {
      name: 'location[phone1]',
      display:'Phone1',
      rules: 'required|callback_check_phone'
    }, {
      name: 'location[email]',
      display:'Email',
      rules: 'required|callback_check_email'
    }, {
      name: 'location[nickname]',
      display:'Nickname',
      rules: 'required'
    }, {
      name: 'location[description]',
      display:'Description',
      rules: 'required'
    }], function(errors, event) {
      if (errors.length > 0) {
      var temp;
      $(":text").each(function(){
          $(this).css("border","#cccccc 1px solid");      
        });
      for (var i=0; i<errors.length; i++){
        temp = errors[i].id;
        $("#" + temp).css("border","1px solid red");
      }
      temp = errors[0].id;
      $( "#" + temp).focus();
      } 
    }); 
    validator.registerCallback('check_email', function(value) {
      var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/;
      if( !emailReg.test( value ) ) {
        return false;
      } else {
        return true;
      }
    })
    .setMessage('check_email', 'Please enter a valid email address.');        
    validator.registerCallback('check_phone', function(value) {
      var phoneno = /^(\()?\d{3}(\))?(-|\s)?\d{4}(-|\s)\d{4}$/;  
      if( !value.match(phoneno) ) {
        return false;
      } else {
        return true;
      }
    })
    .setMessage('check_phone', 'Please enter number according to format');